C51 COMPILER V9.60.0.0   SYSTEM1_CODE                                                      07/14/2021 21:36:03 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE SYSTEM1_CODE
OBJECT MODULE PLACED IN .\Objects\system1-code.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE system1-code.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listi
                    -ngs\system1-code.lst) TABS(2) OBJECT(.\Objects\system1-code.obj)

line level    source

   1          #include <reg51.h>
   2          #include <absacc.h>
   3          // The frequency for microcontroller is 11.0592MHz
   4          // The frequency for instruction cycles is 921.6kHz
   5          // To create a pulse with frequency 1.8k We use timer
   6          // The value to set for a full timer is 921.6k/(2*555)=1.807
   7          #define pulseSet = 2
   8          
   9          // Setting the intial values and specifying pins for microcontroller
  10          int pulseCount = 0;
  11          int i = 0;
  12          sbit pulse = P1^1;
  13          int memoryAddPointer = 0x2800;
  14          int value;
  15          int help;
  16          int dutyCycle = 127;  // It must be a number between 0 and 255
  17                                // 127 specifies 50% duty cycle
  18          int start = 0;
  19          sbit startSignal = P1^0;
  20          
  21          
  22          void delay(){
  23   1        TMOD &= 0xF1;   // Timer 0 Mode 1, Timer 1 remains the same
  24   1        TH0 = 0xFC;     // Initial value for 1milisecond delay
  25   1        TL0 = 0x66;
  26   1        TR0 = 1;
  27   1        while(TF0 == 0){
  28   2          TF0 = 0;
  29   2          TR0 = 0;
  30   2        }
  31   1      }
  32          
  33          int main(void){
  34   1        ET0 = 1;
  35   1        ET1 = 1;
  36   1        EA = 1;         // Enable Timer and global interrupts
  37   1        
  38   1        // Initial conditions for microcontroller ports
  39   1        P1 = 0x00;
  40   1        P3 = 0x00;
  41   1        // Other ports are given values as you read from external memory
  42   1        
  43   1        // Using timer 1 for pulse
  44   1        TMOD &= 0xDF;
  45   1        TMOD |= 0x10;   // Set Timer 1 Mode 1, Timer 0 remains the same
  46   1        TH1 = 0x00;
  47   1        TL1 = 0x00;
  48   1        TR0 = 0;
  49   1        
  50   1        while(1){
  51   2          if(pulseCount >= 10){
  52   3            start = 1;
  53   3            break;
  54   3          }
C51 COMPILER V9.60.0.0   SYSTEM1_CODE                                                      07/14/2021 21:36:03 PAGE 2   

  55   2        }
  56   1        if(start){
  57   2          // Now that we have counted the signal, we use Timer 1 for serial communication
  58   2          TMOD &= 0x2F;
  59   2          SCON = 0x50;        // The value used for baud rate 9600
  60   2          // The baud rate 19200 can not be used since the value for it is 1.5
  61   2          // but the value for baud rate determination must be a decimal like 3.
  62   2          TH1 = 0xFD;
  63   2          TR1 = 1;            // Start Timer 1
  64   2          // Now we have received ten consecutive pulses so we send active signal
  65   2          startSignal = 1;    // Sending the start signal to frying oven
  66   2          while(1){
  67   3            value = XBYTE[0x3801];              // Getting data from port B of 8255
  68   3            XBYTE[memoryAddPointer] = value;    // Saving given data
  69   3            SBUF = value;
  70   3            while(TI == 0);                     // Wait until the transmit is complete
  71   3            TI = 0;
  72   3            memoryAddPointer = memoryAddPointer + 1;
  73   3                                                // Incrementing memoryAdd Pointer
  74   3            if(memoryAddPointer == 0x3800){     
  75   4              // Checks whether we have reached the end of RAM
  76   4              memoryAddPointer = 0x2800;        // Starts to rewrite data
  77   4            }
  78   3            // We are now setting a 1 second delay
  79   3            for(i = 0; i < 1000; i++){
  80   4              delay();        // One milisecond delay
  81   4            }
  82   3          }
  83   2        }
  84   1        return 0;
  85   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    162    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     14    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
